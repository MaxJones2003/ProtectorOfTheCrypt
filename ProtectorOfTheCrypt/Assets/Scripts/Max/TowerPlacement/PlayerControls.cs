//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Max/TowerPlacement/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""TowerPlacementMode"",
            ""id"": ""7570a76f-7a53-47de-94d1-fda8ce2dc028"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a360b4be-1b3d-42ce-97f6-0da47964bdc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b74053f7-7880-482f-bdd2-8349f6c7fc92"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09c4c143-59a9-4829-a0c7-c4c5d1d6a5b6"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StandardMode"",
            ""id"": ""e3632379-7b7c-4c00-a9d3-2fba00544027"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""d0540003-14f0-46c1-8edc-9bd1796c2e82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4d9388a-e0c5-4eaa-9302-8e4bc03edb0d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce750587-683e-48c3-8afb-95a10f55add3"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TowerPlacementMode
        m_TowerPlacementMode = asset.FindActionMap("TowerPlacementMode", throwIfNotFound: true);
        m_TowerPlacementMode_Click = m_TowerPlacementMode.FindAction("Click", throwIfNotFound: true);
        // StandardMode
        m_StandardMode = asset.FindActionMap("StandardMode", throwIfNotFound: true);
        m_StandardMode_Click = m_StandardMode.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TowerPlacementMode
    private readonly InputActionMap m_TowerPlacementMode;
    private List<ITowerPlacementModeActions> m_TowerPlacementModeActionsCallbackInterfaces = new List<ITowerPlacementModeActions>();
    private readonly InputAction m_TowerPlacementMode_Click;
    public struct TowerPlacementModeActions
    {
        private @PlayerControls m_Wrapper;
        public TowerPlacementModeActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_TowerPlacementMode_Click;
        public InputActionMap Get() { return m_Wrapper.m_TowerPlacementMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TowerPlacementModeActions set) { return set.Get(); }
        public void AddCallbacks(ITowerPlacementModeActions instance)
        {
            if (instance == null || m_Wrapper.m_TowerPlacementModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TowerPlacementModeActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(ITowerPlacementModeActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(ITowerPlacementModeActions instance)
        {
            if (m_Wrapper.m_TowerPlacementModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITowerPlacementModeActions instance)
        {
            foreach (var item in m_Wrapper.m_TowerPlacementModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TowerPlacementModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TowerPlacementModeActions @TowerPlacementMode => new TowerPlacementModeActions(this);

    // StandardMode
    private readonly InputActionMap m_StandardMode;
    private List<IStandardModeActions> m_StandardModeActionsCallbackInterfaces = new List<IStandardModeActions>();
    private readonly InputAction m_StandardMode_Click;
    public struct StandardModeActions
    {
        private @PlayerControls m_Wrapper;
        public StandardModeActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_StandardMode_Click;
        public InputActionMap Get() { return m_Wrapper.m_StandardMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StandardModeActions set) { return set.Get(); }
        public void AddCallbacks(IStandardModeActions instance)
        {
            if (instance == null || m_Wrapper.m_StandardModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StandardModeActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IStandardModeActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IStandardModeActions instance)
        {
            if (m_Wrapper.m_StandardModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStandardModeActions instance)
        {
            foreach (var item in m_Wrapper.m_StandardModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StandardModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StandardModeActions @StandardMode => new StandardModeActions(this);
    public interface ITowerPlacementModeActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IStandardModeActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
